{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CreateTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-createTask"
      }
    },
    "GetTasksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-getTasks"
      }
    },
    "UpdateTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-updateTask"
      }
    },
    "DeleteTaskLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-deleteTask"
      }
    },
    "GetUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-getUsers"
      }
    },
    "CreateTeamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-createTeam"
      }
    },
    "GetTeamsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-getTeams"
      }
    },
    "UpdateTeamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-updateTeam"
      }
    },
    "DeleteTeamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-deleteTeam"
      }
    },
    "UpdateTaskPatchLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-updateTaskPatch"
      }
    },
    "NotifyTeamLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/task-management-backend-dev-notifyTeam"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "task-management-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-management-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/task-management-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:Scan"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "TasksTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "TeamsTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "NotificationTopic"
                  }
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "task-management-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "CreateTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/createTask.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-createTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateTaskLogGroup"
      ]
    },
    "GetTasksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/getTasks.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-getTasks",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTasksLogGroup"
      ]
    },
    "UpdateTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/updateTask.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-updateTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTaskLogGroup"
      ]
    },
    "DeleteTaskLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/deleteTask.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-deleteTask",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteTaskLogGroup"
      ]
    },
    "GetUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/getUsers.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-getUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUsersLogGroup"
      ]
    },
    "CreateTeamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/createTeam.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-createTeam",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateTeamLogGroup"
      ]
    },
    "GetTeamsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/getTeam.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-getTeams",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTeamsLogGroup"
      ]
    },
    "UpdateTeamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/updateTeam.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-updateTeam",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTeamLogGroup"
      ]
    },
    "DeleteTeamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/deleteTeam.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-deleteTeam",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteTeamLogGroup"
      ]
    },
    "UpdateTaskPatchLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/updateTask.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-updateTaskPatch",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTaskPatchLogGroup"
      ]
    },
    "NotifyTeamLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/task-management-backend/dev/1748277136103-2025-05-26T16:32:16.103Z/task-management-backend.zip"
        },
        "Handler": "src/handlers/notifyTeam.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "task-management-backend-dev-notifyTeam",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TASKS_TABLE": {
              "Ref": "TasksTable"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "TEAMS_TABLE": {
              "Ref": "TeamsTable"
            },
            "NOTIFICATION_TOPIC_ARN": {
              "Ref": "NotificationTopic"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "NotifyTeamLogGroup"
      ]
    },
    "CreateTaskLambdaVersionbO9EqeKOYthfqVgVP7ryXzTvVxa2fwpldhGX2Pkxhk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTaskLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "GetTasksLambdaVersionfOm2qH4P88Dn8Tp0ijAZXhc33tC8gQLzqjhohJ3uE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTasksLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "UpdateTaskLambdaVersion05n1Wqs3ix5KnoHPQab3EgqpNVc3zOSF7THTY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTaskLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "DeleteTaskLambdaVersion0uD5I7WMDxGRpA0wU6Da5Lf0B4Zo9ATEh9BMVCMKkzc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteTaskLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "GetUsersLambdaVersionBcaq0LcvUxjYGSXokLdagWlqFepx8ROxUrCGyl8Ok": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUsersLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "CreateTeamLambdaVersionRGazndSVtzBLquK2CPrQwTskpX0PBMy40AAKbppdU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateTeamLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "GetTeamsLambdaVersionnO3nGg37tMVl0hU5O7wn3uyeRE3bz43LuiVS7Qk6i4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTeamsLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "UpdateTeamLambdaVersiondrvW5hMdEr3099jfpVbUutasLi0r1D51OZxrDznYIMw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTeamLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "DeleteTeamLambdaVersionWtuUALFJyvOZIUX89cOKHNTzIk7RRjK8t2GsYNw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteTeamLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "UpdateTaskPatchLambdaVersionjUgRwdW9iWCqLwFAubRqMDFg9eMOtv6crAq9eY5w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTaskPatchLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "NotifyTeamLambdaVersionVmy6bG2G3MyCBZZM5WzOMbr0KVdmcDLVaZHOgCk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NotifyTeamLambdaFunction"
        },
        "CodeSha256": "smt5/ZHIWnj6oAbrdoUL7i3sDrAokC8ILBCmpw/By5Q="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-task-management-backend",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "AllowMethods": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE",
            "OPTIONS"
          ],
          "AllowOrigins": [
            "http://localhost:5173",
            "https://d84l1y8p4kdic.cloudfront.net"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "CreateTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostTasks": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /tasks",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateTask"
    },
    "GetTasksLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTasksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTasks": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTasksLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTasks": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /tasks",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTasks"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetTasks"
    },
    "UpdateTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutTasksIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /tasks/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateTask"
    },
    "DeleteTaskLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteTaskLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteTask": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteTaskLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteTasksIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /tasks/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteTask"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteTask"
    },
    "GetUsersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUsers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUsersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsers": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /users",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUsers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUsers"
    },
    "CreateTeamLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateTeamLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateTeam": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateTeamLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostTeams": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /teams",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateTeam"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateTeam"
    },
    "GetTeamsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTeamsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTeams": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTeamsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetTeams": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /teams",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTeams"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetTeams"
    },
    "UpdateTeamLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTeamLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateTeam": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateTeamLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutTeamsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /teams/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateTeam"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateTeam"
    },
    "DeleteTeamLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteTeamLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteTeam": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteTeamLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteTeamsIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /teams/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteTeam"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteTeam"
    },
    "UpdateTaskPatchLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTaskPatchLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateTaskPatch": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateTaskPatchLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchTasksIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /tasks/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateTaskPatch"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateTaskPatch"
    },
    "NotifyTeamLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NotifyTeamLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationNotifyTeam": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "NotifyTeamLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostNotify": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /notify",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationNotifyTeam"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationNotifyTeam"
    },
    "TasksTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "TasksTableV2",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "UsersV2",
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "TeamsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Teams",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "taskNotificationTopic"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreateTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTaskLambdaVersionbO9EqeKOYthfqVgVP7ryXzTvVxa2fwpldhGX2Pkxhk"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-CreateTaskLambdaFunctionQualifiedArn"
      }
    },
    "GetTasksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTasksLambdaVersionfOm2qH4P88Dn8Tp0ijAZXhc33tC8gQLzqjhohJ3uE"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-GetTasksLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTaskLambdaVersion05n1Wqs3ix5KnoHPQab3EgqpNVc3zOSF7THTY"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-UpdateTaskLambdaFunctionQualifiedArn"
      }
    },
    "DeleteTaskLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteTaskLambdaVersion0uD5I7WMDxGRpA0wU6Da5Lf0B4Zo9ATEh9BMVCMKkzc"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-DeleteTaskLambdaFunctionQualifiedArn"
      }
    },
    "GetUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUsersLambdaVersionBcaq0LcvUxjYGSXokLdagWlqFepx8ROxUrCGyl8Ok"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-GetUsersLambdaFunctionQualifiedArn"
      }
    },
    "CreateTeamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateTeamLambdaVersionRGazndSVtzBLquK2CPrQwTskpX0PBMy40AAKbppdU"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-CreateTeamLambdaFunctionQualifiedArn"
      }
    },
    "GetTeamsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTeamsLambdaVersionnO3nGg37tMVl0hU5O7wn3uyeRE3bz43LuiVS7Qk6i4"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-GetTeamsLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTeamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTeamLambdaVersiondrvW5hMdEr3099jfpVbUutasLi0r1D51OZxrDznYIMw"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-UpdateTeamLambdaFunctionQualifiedArn"
      }
    },
    "DeleteTeamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteTeamLambdaVersionWtuUALFJyvOZIUX89cOKHNTzIk7RRjK8t2GsYNw"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-DeleteTeamLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTaskPatchLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTaskPatchLambdaVersionjUgRwdW9iWCqLwFAubRqMDFg9eMOtv6crAq9eY5w"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-UpdateTaskPatchLambdaFunctionQualifiedArn"
      }
    },
    "NotifyTeamLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NotifyTeamLambdaVersionVmy6bG2G3MyCBZZM5WzOMbr0KVdmcDLVaZHOgCk"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-NotifyTeamLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-task-management-backend-dev-HttpApiUrl"
      }
    }
  }
}